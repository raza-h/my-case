@using AbsolCase.Models;
@model AbsolCase.Models.PricePlan

@{
    ViewData["Title"] = "AddSubscription";
    Layout = "~/Views/Shared/_SPLayout.cshtml";
    List<Service> services = (List<Service>)ViewBag.ServicesList;
}

<h2>Add Price Plans</h2>
<h4>Price Plan</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="AddPricePlan" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Title" class="control-label">Title<span style="font-weight:bolder;font-size:18px;color:red">*</span></label>
                @Html.EditorFor(model => model.PlanName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PlanName, "", new { @class = "text-danger db" })
            </div>
            <div class="form-group">
                <label asp-for="price" class="control-label">Price<span style="font-weight:bolder;font-size:18px;color:red">*</span></label>
                @Html.EditorFor(model => model.PriceRange, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PriceRange, "", new { @class = "text-danger db" })
            </div>
            <div class="row">
                <div class="col-md-12">
                    <label class="col-form-label">Time Period</label>
                    <select name="TimeRange" asp-for="TimeRange" class="form-control">
                        <option>Per Week</option>
                        <option>Per Month</option>
                        <option>Per Year</option>
                    </select>
                </div>
            </div>
            @if (services != null && services.Count > 0)
            {
                <div class="row">
                    <div class="col-md-12">
                        @foreach (var service in services)
                        {
                            <div class="form-check">
                                <input class="form-check-input" name="ServicesIds" type="checkbox" value="@service.Id" id="ServicesIds" style="margin-left: 0px">
                                <label class="form-check-label" for="ServicesIds">
                                    @service.Name
                                </label>
                            </div>
                        }
                    </div>
                    @Html.ValidationMessageFor(model => model.ServicesIds, "", new { @class = "text-danger db" })
                </div>
            }
            <br />
            <button type="submit" class="btn btn-lg btn-primary me-3" style="float:right">Submit</button>
        </form>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
<script>
    $.validator.addMethod('cannotbeemptyattribute',
        function (value, element, params) {
            if (value == "") {
                return false;
            }
            return true;
        }, "Please set a value");
    $.validator.unobtrusive.adapters.add('cannotbeemptyattribute', ['name'],
        function (options) {
            console.log("options", options);
            options.rules['cannotbeemptyattribute'] = { name: options.params.name };
            console.log(options.rules['cannotbeemptyattribute']);
            options.messages['cannotbeemptyattribute'] = options.message.messages;
        });
</script>
}
